URL: https://www.python.org/
==================================================
Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. 

You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            


Python 3.13.5


Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Python 3.13.5


Note that Python 3.9+ cannot be used on Windows 7 or earlier.

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Python 3.13.5


Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.

Python can be used on many operating systems and environments.


View the full list of downloads


Get started below, or visit the Documentation page to browse by version. 


Python Docs


Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.

Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand

The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3

Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3

Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3.

Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3

Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview.

Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More

Whether you're new to programming or an experienced developer, it's easy to learn and use Python.

Start with our Beginner’s Guide

Python source code and installers are available for download for all versions!

Latest: Python 3.13.5

Documentation for Python's standard library, along with tutorials and guides, are available online.

docs.python.org

Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go.

jobs.python.org

More

More

More

Using Python with Gretel.ai to Generate Synthetic Location Data by Alex Watson, co-founder and CPO, Gretel.ai

More

The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more 


Become a Member
Donate to the PSF



Copyright ©2001-2025.
                             Python Software Foundation
                             Legal Statements
                             Privacy Notice



- 
Python

- 
PSF

- 
Docs

- 
PyPI

- 
Jobs

- 
Community


- 
A A

Smaller
Larger
Reset


- Smaller
- Larger
- Reset

- Smaller
- Larger
- Reset

- 
Socialize

LinkedIn
Mastodon
Chat on IRC
Twitter


- LinkedIn
- Mastodon
- Chat on IRC
- Twitter

- LinkedIn
- Mastodon
- Chat on IRC
- Twitter

- 
Sign In

Sign Up / Register
Sign In


- Sign Up / Register
- Sign In

- Sign Up / Register
- Sign In

- 
About

Applications
Quotes
Getting Started
Help
Python Brochure

Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            
- 
Downloads

All releases
Source code
Windows
macOS
Other Platforms
License
Alternative Implementations



Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads





- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 

Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads



- 
Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays

Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs



- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs


- 
Community

Diversity
Mailing Lists
IRC
Forums
PSF Annual Impact Report
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Code of Conduct
Community Awards
Get Involved
Shared Stories

The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.


- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.

- 
Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development



                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 

                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand

- 
News

Python News
PSF Newsletter
PSF News
PyCon US News
News from the Community


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community
- 
Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event
Find events from the Python Community around the world!

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- Find events from the Python Community around the world!

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            

- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 

Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads




- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs



- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 

                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- Find events from the Python Community around the world!

- 
>_
                        Launch Interactive Shell



- 
# Python 3: Fibonacci series up to n
>>> def fib(n):
>>>     a, b = 0, 1
>>>     while a < n:
>>>         print(a, end=' ')
>>>         a, b = b, a+b
>>>     print()
>>> fib(1000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
Functions Defined
The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3

- 
# Python 3: List comprehensions
>>> fruits = ['Banana', 'Apple', 'Lime']
>>> loud_fruits = [fruit.upper() for fruit in fruits]
>>> print(loud_fruits)
['BANANA', 'APPLE', 'LIME']

# List and the enumerate function
>>> list(enumerate(fruits))
[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]
Compound Data Types
Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3

- 
# Python 3: Simple arithmetic
>>> 1 / 2
0.5
>>> 2 ** 3
8
>>> 17 / 3  # classic division returns a float
5.666666666666667
>>> 17 // 3  # floor division
5
Intuitive Interpretation
Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3.

- 
# For loop on a list
>>> numbers = [2, 4, 6, 8]
>>> product = 1
>>> for number in numbers:
...    product = product * number
... 
>>> print('The product is:', product)
The product is: 384
All the Flow You’d Expect
Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3

- 
# Simple output (with Unicode)
>>> print("Hello, I'm Python!")
Hello, I'm Python!
# Input, assignment
>>> name = input('What is your name?\n')
What is your name?
Python
>>> print(f'Hi, {name}.')
Hi, Python.

Quick & Easy to Learn
Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview.


- 1
- 2
- 3
- 4
- 5

- 
2025-07-24
PSF Board Election Nominations Opening July 29th
- 
2025-07-22
Python 3.14 release candidate 1 is go!
- 
2025-07-16
Affirm Your PSF Membership Voting Status
- 
2025-07-09
PSF News: PyPI Orgs, Board Election, & Yearly Reports
- 
2025-07-08
Notice of Python Software Foundation Bylaws Change - Effective July 23, 2025

- 
2025-08-08
Buea - Creating Python Communities and outreach
- 
2025-08-11
DjangoCon Africa 2025
- 
2025-08-13
PyCon Somalia 2025
- 
2025-08-15
PyCon Korea 2025
- 
2025-08-18
EuroSciPy 2025

- Web Development:
        Django, Pyramid, Bottle, Tornado, Flask, web2py
- GUI Development:
        tkInter, PyGObject, PyQt, PySide, Kivy, wxPython, DearPyGui
- Scientific and Numeric:
        
SciPy, Pandas, IPython
- Software Development:
        Buildbot, Trac, Roundup
- System Administration:
        Ansible, Salt, OpenStack, xonsh

- 
About

Applications
Quotes
Getting Started
Help
Python Brochure


- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Downloads

All releases
Source code
Windows
macOS
Other Platforms
License
Alternative Implementations


- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 
Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays


- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Community

Diversity
Mailing Lists
IRC
Forums
PSF Annual Impact Report
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Code of Conduct
Community Awards
Get Involved
Shared Stories


- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 
News

Python News
PSF Newsletter
PSF News
PyCon US News
News from the Community


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community
- 
Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event


- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- 
Contributing

Developer's Guide
Issue Tracker
python-dev list
Core Mentorship
Report a Security Issue


- Developer's Guide
- Issue Tracker
- python-dev list
- Core Mentorship
- Report a Security Issue

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure

- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations

- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays

- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories

- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development

- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event

- Developer's Guide
- Issue Tracker
- python-dev list
- Core Mentorship
- Report a Security Issue

- Help & General Contact
- Diversity Initiatives
- Submit Website Bug
- 
Status

--------------------------------------------------

URL: https://docs.python.org/3/tutorial/
==================================================
Tip

This tutorial is designed for
programmers that are new to the Python language,
not beginners who are new to programming.

Python is an easy to learn, powerful programming language. It has efficient
high-level data structures and a simple but effective approach to
object-oriented programming. Python’s elegant syntax and dynamic typing,
together with its interpreted nature, make it an ideal language for scripting
and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available
in source or binary form for all major platforms from the Python web site,
https://www.python.org/, and may be freely distributed. The same site also
contains distributions of and pointers to many free third party Python modules,
programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types
implemented in C or C++ (or other languages callable from C). Python is also
suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and
features of the Python language and system. Be aware that it expects you to
have a basic understanding of programming in general. It helps to have a Python
interpreter handy for hands-on experience, but all examples are self-contained,
so the tutorial can be read off-line as well.

For a description of standard objects and modules, see The Python Standard Library.
The Python Language Reference gives a more formal definition of the language.  To write
extensions in C or C++, read Extending and Embedding the Python Interpreter and
Python/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single
feature, or even every commonly used feature. Instead, it introduces many of
Python’s most noteworthy features, and will give you a good idea of the
language’s flavor and style. After reading it, you will be able to read and
write Python modules and programs, and you will be ready to learn more about the
various Python library modules described in The Python Standard Library.

The Glossary is also worth going through.

- 1. Whetting Your Appetite
- 2. Using the Python Interpreter
2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode


2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding




- 2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode


- 2.1.1. Argument Passing
- 2.1.2. Interactive Mode
- 2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding


- 2.2.1. Source Code Encoding
- 3. An Informal Introduction to Python
3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists


3.2. First Steps Towards Programming


- 3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists


- 3.1.1. Numbers
- 3.1.2. Text
- 3.1.3. Lists
- 3.2. First Steps Towards Programming
- 4. More Control Flow Tools
4.1. if Statements
4.2. for Statements
4.3. The range() Function
4.4. break and continue Statements
4.5. else Clauses on Loops
4.6. pass Statements
4.7. match Statements
4.8. Defining Functions
4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations


4.10. Intermezzo: Coding Style


- 4.1. if Statements
- 4.2. for Statements
- 4.3. The range() Function
- 4.4. break and continue Statements
- 4.5. else Clauses on Loops
- 4.6. pass Statements
- 4.7. match Statements
- 4.8. Defining Functions
- 4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations


- 4.9.1. Default Argument Values
- 4.9.2. Keyword Arguments
- 4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


- 4.9.3.1. Positional-or-Keyword Arguments
- 4.9.3.2. Positional-Only Parameters
- 4.9.3.3. Keyword-Only Arguments
- 4.9.3.4. Function Examples
- 4.9.3.5. Recap
- 4.9.4. Arbitrary Argument Lists
- 4.9.5. Unpacking Argument Lists
- 4.9.6. Lambda Expressions
- 4.9.7. Documentation Strings
- 4.9.8. Function Annotations
- 4.10. Intermezzo: Coding Style
- 5. Data Structures
5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions


5.2. The del statement
5.3. Tuples and Sequences
5.4. Sets
5.5. Dictionaries
5.6. Looping Techniques
5.7. More on Conditions
5.8. Comparing Sequences and Other Types


- 5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions


- 5.1.1. Using Lists as Stacks
- 5.1.2. Using Lists as Queues
- 5.1.3. List Comprehensions
- 5.1.4. Nested List Comprehensions
- 5.2. The del statement
- 5.3. Tuples and Sequences
- 5.4. Sets
- 5.5. Dictionaries
- 5.6. Looping Techniques
- 5.7. More on Conditions
- 5.8. Comparing Sequences and Other Types
- 6. Modules
6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files


6.2. Standard Modules
6.3. The dir() Function
6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories




- 6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files


- 6.1.1. Executing modules as scripts
- 6.1.2. The Module Search Path
- 6.1.3. “Compiled” Python files
- 6.2. Standard Modules
- 6.3. The dir() Function
- 6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories


- 6.4.1. Importing * From a Package
- 6.4.2. Intra-package References
- 6.4.3. Packages in Multiple Directories
- 7. Input and Output
7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting


7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json




- 7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting


- 7.1.1. Formatted String Literals
- 7.1.2. The String format() Method
- 7.1.3. Manual String Formatting
- 7.1.4. Old string formatting
- 7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json


- 7.2.1. Methods of File Objects
- 7.2.2. Saving structured data with json
- 8. Errors and Exceptions
8.1. Syntax Errors
8.2. Exceptions
8.3. Handling Exceptions
8.4. Raising Exceptions
8.5. Exception Chaining
8.6. User-defined Exceptions
8.7. Defining Clean-up Actions
8.8. Predefined Clean-up Actions
8.9. Raising and Handling Multiple Unrelated Exceptions
8.10. Enriching Exceptions with Notes


- 8.1. Syntax Errors
- 8.2. Exceptions
- 8.3. Handling Exceptions
- 8.4. Raising Exceptions
- 8.5. Exception Chaining
- 8.6. User-defined Exceptions
- 8.7. Defining Clean-up Actions
- 8.8. Predefined Clean-up Actions
- 8.9. Raising and Handling Multiple Unrelated Exceptions
- 8.10. Enriching Exceptions with Notes
- 9. Classes
9.1. A Word About Names and Objects
9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example


9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables


9.4. Random Remarks
9.5. Inheritance
9.5.1. Multiple Inheritance


9.6. Private Variables
9.7. Odds and Ends
9.8. Iterators
9.9. Generators
9.10. Generator Expressions


- 9.1. A Word About Names and Objects
- 9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example


- 9.2.1. Scopes and Namespaces Example
- 9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables


- 9.3.1. Class Definition Syntax
- 9.3.2. Class Objects
- 9.3.3. Instance Objects
- 9.3.4. Method Objects
- 9.3.5. Class and Instance Variables
- 9.4. Random Remarks
- 9.5. Inheritance
9.5.1. Multiple Inheritance


- 9.5.1. Multiple Inheritance
- 9.6. Private Variables
- 9.7. Odds and Ends
- 9.8. Iterators
- 9.9. Generators
- 9.10. Generator Expressions
- 10. Brief Tour of the Standard Library
10.1. Operating System Interface
10.2. File Wildcards
10.3. Command Line Arguments
10.4. Error Output Redirection and Program Termination
10.5. String Pattern Matching
10.6. Mathematics
10.7. Internet Access
10.8. Dates and Times
10.9. Data Compression
10.10. Performance Measurement
10.11. Quality Control
10.12. Batteries Included


- 10.1. Operating System Interface
- 10.2. File Wildcards
- 10.3. Command Line Arguments
- 10.4. Error Output Redirection and Program Termination
- 10.5. String Pattern Matching
- 10.6. Mathematics
- 10.7. Internet Access
- 10.8. Dates and Times
- 10.9. Data Compression
- 10.10. Performance Measurement
- 10.11. Quality Control
- 10.12. Batteries Included
- 11. Brief Tour of the Standard Library — Part II
11.1. Output Formatting
11.2. Templating
11.3. Working with Binary Data Record Layouts
11.4. Multi-threading
11.5. Logging
11.6. Weak References
11.7. Tools for Working with Lists
11.8. Decimal Floating-Point Arithmetic


- 11.1. Output Formatting
- 11.2. Templating
- 11.3. Working with Binary Data Record Layouts
- 11.4. Multi-threading
- 11.5. Logging
- 11.6. Weak References
- 11.7. Tools for Working with Lists
- 11.8. Decimal Floating-Point Arithmetic
- 12. Virtual Environments and Packages
12.1. Introduction
12.2. Creating Virtual Environments
12.3. Managing Packages with pip


- 12.1. Introduction
- 12.2. Creating Virtual Environments
- 12.3. Managing Packages with pip
- 13. What Now?
- 14. Interactive Input Editing and History Substitution
14.1. Tab Completion and History Editing
14.2. Alternatives to the Interactive Interpreter


- 14.1. Tab Completion and History Editing
- 14.2. Alternatives to the Interactive Interpreter
- 15. Floating-Point Arithmetic:  Issues and Limitations
15.1. Representation Error


- 15.1. Representation Error
- 16. Appendix
16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules




- 16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules


- 16.1.1. Error Handling
- 16.1.2. Executable Python Scripts
- 16.1.3. The Interactive Startup File
- 16.1.4. The Customization Modules

- 2.1. Invoking the Interpreter
2.1.1. Argument Passing
2.1.2. Interactive Mode


- 2.1.1. Argument Passing
- 2.1.2. Interactive Mode
- 2.2. The Interpreter and Its Environment
2.2.1. Source Code Encoding


- 2.2.1. Source Code Encoding

- 2.1.1. Argument Passing
- 2.1.2. Interactive Mode

- 2.2.1. Source Code Encoding

- 3.1. Using Python as a Calculator
3.1.1. Numbers
3.1.2. Text
3.1.3. Lists


- 3.1.1. Numbers
- 3.1.2. Text
- 3.1.3. Lists
- 3.2. First Steps Towards Programming

- 3.1.1. Numbers
- 3.1.2. Text
- 3.1.3. Lists

- 4.1. if Statements
- 4.2. for Statements
- 4.3. The range() Function
- 4.4. break and continue Statements
- 4.5. else Clauses on Loops
- 4.6. pass Statements
- 4.7. match Statements
- 4.8. Defining Functions
- 4.9. More on Defining Functions
4.9.1. Default Argument Values
4.9.2. Keyword Arguments
4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


4.9.4. Arbitrary Argument Lists
4.9.5. Unpacking Argument Lists
4.9.6. Lambda Expressions
4.9.7. Documentation Strings
4.9.8. Function Annotations


- 4.9.1. Default Argument Values
- 4.9.2. Keyword Arguments
- 4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


- 4.9.3.1. Positional-or-Keyword Arguments
- 4.9.3.2. Positional-Only Parameters
- 4.9.3.3. Keyword-Only Arguments
- 4.9.3.4. Function Examples
- 4.9.3.5. Recap
- 4.9.4. Arbitrary Argument Lists
- 4.9.5. Unpacking Argument Lists
- 4.9.6. Lambda Expressions
- 4.9.7. Documentation Strings
- 4.9.8. Function Annotations
- 4.10. Intermezzo: Coding Style

- 4.9.1. Default Argument Values
- 4.9.2. Keyword Arguments
- 4.9.3. Special parameters
4.9.3.1. Positional-or-Keyword Arguments
4.9.3.2. Positional-Only Parameters
4.9.3.3. Keyword-Only Arguments
4.9.3.4. Function Examples
4.9.3.5. Recap


- 4.9.3.1. Positional-or-Keyword Arguments
- 4.9.3.2. Positional-Only Parameters
- 4.9.3.3. Keyword-Only Arguments
- 4.9.3.4. Function Examples
- 4.9.3.5. Recap
- 4.9.4. Arbitrary Argument Lists
- 4.9.5. Unpacking Argument Lists
- 4.9.6. Lambda Expressions
- 4.9.7. Documentation Strings
- 4.9.8. Function Annotations

- 4.9.3.1. Positional-or-Keyword Arguments
- 4.9.3.2. Positional-Only Parameters
- 4.9.3.3. Keyword-Only Arguments
- 4.9.3.4. Function Examples
- 4.9.3.5. Recap

- 5.1. More on Lists
5.1.1. Using Lists as Stacks
5.1.2. Using Lists as Queues
5.1.3. List Comprehensions
5.1.4. Nested List Comprehensions


- 5.1.1. Using Lists as Stacks
- 5.1.2. Using Lists as Queues
- 5.1.3. List Comprehensions
- 5.1.4. Nested List Comprehensions
- 5.2. The del statement
- 5.3. Tuples and Sequences
- 5.4. Sets
- 5.5. Dictionaries
- 5.6. Looping Techniques
- 5.7. More on Conditions
- 5.8. Comparing Sequences and Other Types

- 5.1.1. Using Lists as Stacks
- 5.1.2. Using Lists as Queues
- 5.1.3. List Comprehensions
- 5.1.4. Nested List Comprehensions

- 6.1. More on Modules
6.1.1. Executing modules as scripts
6.1.2. The Module Search Path
6.1.3. “Compiled” Python files


- 6.1.1. Executing modules as scripts
- 6.1.2. The Module Search Path
- 6.1.3. “Compiled” Python files
- 6.2. Standard Modules
- 6.3. The dir() Function
- 6.4. Packages
6.4.1. Importing * From a Package
6.4.2. Intra-package References
6.4.3. Packages in Multiple Directories


- 6.4.1. Importing * From a Package
- 6.4.2. Intra-package References
- 6.4.3. Packages in Multiple Directories

- 6.1.1. Executing modules as scripts
- 6.1.2. The Module Search Path
- 6.1.3. “Compiled” Python files

- 6.4.1. Importing * From a Package
- 6.4.2. Intra-package References
- 6.4.3. Packages in Multiple Directories

- 7.1. Fancier Output Formatting
7.1.1. Formatted String Literals
7.1.2. The String format() Method
7.1.3. Manual String Formatting
7.1.4. Old string formatting


- 7.1.1. Formatted String Literals
- 7.1.2. The String format() Method
- 7.1.3. Manual String Formatting
- 7.1.4. Old string formatting
- 7.2. Reading and Writing Files
7.2.1. Methods of File Objects
7.2.2. Saving structured data with json


- 7.2.1. Methods of File Objects
- 7.2.2. Saving structured data with json

- 7.1.1. Formatted String Literals
- 7.1.2. The String format() Method
- 7.1.3. Manual String Formatting
- 7.1.4. Old string formatting

- 7.2.1. Methods of File Objects
- 7.2.2. Saving structured data with json

- 8.1. Syntax Errors
- 8.2. Exceptions
- 8.3. Handling Exceptions
- 8.4. Raising Exceptions
- 8.5. Exception Chaining
- 8.6. User-defined Exceptions
- 8.7. Defining Clean-up Actions
- 8.8. Predefined Clean-up Actions
- 8.9. Raising and Handling Multiple Unrelated Exceptions
- 8.10. Enriching Exceptions with Notes

- 9.1. A Word About Names and Objects
- 9.2. Python Scopes and Namespaces
9.2.1. Scopes and Namespaces Example


- 9.2.1. Scopes and Namespaces Example
- 9.3. A First Look at Classes
9.3.1. Class Definition Syntax
9.3.2. Class Objects
9.3.3. Instance Objects
9.3.4. Method Objects
9.3.5. Class and Instance Variables


- 9.3.1. Class Definition Syntax
- 9.3.2. Class Objects
- 9.3.3. Instance Objects
- 9.3.4. Method Objects
- 9.3.5. Class and Instance Variables
- 9.4. Random Remarks
- 9.5. Inheritance
9.5.1. Multiple Inheritance


- 9.5.1. Multiple Inheritance
- 9.6. Private Variables
- 9.7. Odds and Ends
- 9.8. Iterators
- 9.9. Generators
- 9.10. Generator Expressions

- 9.2.1. Scopes and Namespaces Example

- 9.3.1. Class Definition Syntax
- 9.3.2. Class Objects
- 9.3.3. Instance Objects
- 9.3.4. Method Objects
- 9.3.5. Class and Instance Variables

- 9.5.1. Multiple Inheritance

- 10.1. Operating System Interface
- 10.2. File Wildcards
- 10.3. Command Line Arguments
- 10.4. Error Output Redirection and Program Termination
- 10.5. String Pattern Matching
- 10.6. Mathematics
- 10.7. Internet Access
- 10.8. Dates and Times
- 10.9. Data Compression
- 10.10. Performance Measurement
- 10.11. Quality Control
- 10.12. Batteries Included

- 11.1. Output Formatting
- 11.2. Templating
- 11.3. Working with Binary Data Record Layouts
- 11.4. Multi-threading
- 11.5. Logging
- 11.6. Weak References
- 11.7. Tools for Working with Lists
- 11.8. Decimal Floating-Point Arithmetic

- 12.1. Introduction
- 12.2. Creating Virtual Environments
- 12.3. Managing Packages with pip

- 14.1. Tab Completion and History Editing
- 14.2. Alternatives to the Interactive Interpreter

- 15.1. Representation Error

- 16.1. Interactive Mode
16.1.1. Error Handling
16.1.2. Executable Python Scripts
16.1.3. The Interactive Startup File
16.1.4. The Customization Modules


- 16.1.1. Error Handling
- 16.1.2. Executable Python Scripts
- 16.1.3. The Interactive Startup File
- 16.1.4. The Customization Modules

- 16.1.1. Error Handling
- 16.1.2. Executable Python Scripts
- 16.1.3. The Interactive Startup File
- 16.1.4. The Customization Modules

--------------------------------------------------

URL: https://realpython.com/
==================================================
Explore how Python asyncio works and when to use it. Follow hands-on examples to build efficient programs with coroutines and awaitable tasks.



Jul 30, 2025

advanced
python



— FREE Email Series —

🐍 Python Tricks 💌



🔒 No spam. Unsubscribe any time.


Jul 29, 2025

intermediate
python



Jul 28, 2025

intermediate
python



Jul 23, 2025

intermediate
web-dev



Jul 22, 2025

intermediate
python



Jul 21, 2025

intermediate
python



Jul 16, 2025

intermediate
python



Jul 15, 2025

intermediate
data-science
editors
python
tools



Jul 14, 2025

basics
python



Jul 09, 2025

basics
python



Jul 08, 2025

intermediate
python



Jul 07, 2025

community



Jul 02, 2025

intermediate
python



Jul 01, 2025

intermediate
best-practices



Jun 30, 2025

intermediate
machine-learning



Jun 25, 2025

basics
python



Jun 24, 2025

intermediate
databases
data-science
python



Jun 23, 2025

basics
best-practices



Jun 18, 2025

intermediate
projects


- 
Start Here

- 

 Learn Python
          

Python Tutorials →In-depth articles and video courses
Learning Paths →Guided study plans for accelerated learning
Quizzes & Exercises →Check your learning progress
Browse Topics →Focus on a specific area or skill level
Community Chat →Learn with other Pythonistas
Office Hours →Live Q&A calls with Python experts
Podcast →Hear what’s new in the world of Python
Books →Round out your knowledge and learn offline
Reference →Concise definitions for common Python terms
Code Mentor →BetaPersonalized code assistance & learning tools
Unlock All Content →


- 

            More
          

Learner Stories
Python Newsletter
Python Job Board
Meet the Team
Become a Tutorial Writer
Become a Video Instructor



- 
 Search


- 
Join

- 
Sign‑In


- 









00:00


Introduction




- 









01:42


What led you to learn Python?




- 









08:09


PyCon 2025 talk about the first year at PyPI




- 









11:06


Embracing asking questions




- 









13:55


Being willing to say "I don't know, let's find out"




- 









15:06


What is PEP 541 and resolving name retention issues




- 









23:22


Video Course Spotlight




- 









24:40


Addressing the account recovery backlog




- 









26:43


PyPI Organizations




- 









30:54


Moving beyond the hesitancy to submit a package to PyPI




- 









40:43


Getting past imposter syndrome and applying




- 









45:07


What are you excited about in the world of Python?




- 









46:10


What do you want to learn next?




- 









47:52


How can people follow your work online?




- 









49:03


Thanks and goodbye





- Start Here
- Learning Resources
- Code Mentor
- Python Reference
- Support Center

- Learning Paths
- Quizzes & Exercises
- Browse Topics
- Workshops
- Books

- Podcast
- Newsletter
- Community Chat
- Office Hours
- Learner Stories

- Plans & Pricing
- Team Plans
- For Business
- For Schools
- Reviews

- About Us
- Team
- Mission & Values
- Sponsorships
- Careers
- Press Kit
- Merch

--------------------------------------------------

URL: https://www.python.org/#content
==================================================
Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. 

You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            


Python 3.13.5


Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Python 3.13.5


Note that Python 3.9+ cannot be used on Windows 7 or earlier.

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Python 3.13.5


Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.

Python can be used on many operating systems and environments.


View the full list of downloads


Get started below, or visit the Documentation page to browse by version. 


Python Docs


Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.

Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand

The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3

Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3

Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3.

Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3

Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview.

Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More

Whether you're new to programming or an experienced developer, it's easy to learn and use Python.

Start with our Beginner’s Guide

Python source code and installers are available for download for all versions!

Latest: Python 3.13.5

Documentation for Python's standard library, along with tutorials and guides, are available online.

docs.python.org

Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go.

jobs.python.org

More

More

More

Building a Dependency Graph of Our Python Codebase by George Farcasiu, Noah Kim, Jacon Brugh, Jiahao Li

More

The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more 


Become a Member
Donate to the PSF



Copyright ©2001-2025.
                             Python Software Foundation
                             Legal Statements
                             Privacy Notice



- 
Python

- 
PSF

- 
Docs

- 
PyPI

- 
Jobs

- 
Community


- 
A A

Smaller
Larger
Reset


- Smaller
- Larger
- Reset

- Smaller
- Larger
- Reset

- 
Socialize

LinkedIn
Mastodon
Chat on IRC
Twitter


- LinkedIn
- Mastodon
- Chat on IRC
- Twitter

- LinkedIn
- Mastodon
- Chat on IRC
- Twitter

- 
Sign In

Sign Up / Register
Sign In


- Sign Up / Register
- Sign In

- Sign Up / Register
- Sign In

- 
About

Applications
Quotes
Getting Started
Help
Python Brochure

Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            
- 
Downloads

All releases
Source code
Windows
macOS
Other Platforms
License
Alternative Implementations



Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads





- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 

Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads



- 
Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays

Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs



- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs


- 
Community

Diversity
Mailing Lists
IRC
Forums
PSF Annual Impact Report
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Code of Conduct
Community Awards
Get Involved
Shared Stories

The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.


- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.

- 
Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development



                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 

                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand

- 
News

Python News
PSF Newsletter
PSF News
PyCon US News
News from the Community


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community
- 
Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event
Find events from the Python Community around the world!

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- Find events from the Python Community around the world!

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            

- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 

Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads




- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs



- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 

                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- Find events from the Python Community around the world!

- 
>_
                        Launch Interactive Shell



- 
# Python 3: Fibonacci series up to n
>>> def fib(n):
>>>     a, b = 0, 1
>>>     while a < n:
>>>         print(a, end=' ')
>>>         a, b = b, a+b
>>>     print()
>>> fib(1000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
Functions Defined
The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3

- 
# Python 3: List comprehensions
>>> fruits = ['Banana', 'Apple', 'Lime']
>>> loud_fruits = [fruit.upper() for fruit in fruits]
>>> print(loud_fruits)
['BANANA', 'APPLE', 'LIME']

# List and the enumerate function
>>> list(enumerate(fruits))
[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]
Compound Data Types
Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3

- 
# Python 3: Simple arithmetic
>>> 1 / 2
0.5
>>> 2 ** 3
8
>>> 17 / 3  # classic division returns a float
5.666666666666667
>>> 17 // 3  # floor division
5
Intuitive Interpretation
Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3.

- 
# For loop on a list
>>> numbers = [2, 4, 6, 8]
>>> product = 1
>>> for number in numbers:
...    product = product * number
... 
>>> print('The product is:', product)
The product is: 384
All the Flow You’d Expect
Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3

- 
# Simple output (with Unicode)
>>> print("Hello, I'm Python!")
Hello, I'm Python!
# Input, assignment
>>> name = input('What is your name?\n')
What is your name?
Python
>>> print(f'Hi, {name}.')
Hi, Python.

Quick & Easy to Learn
Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview.


- 1
- 2
- 3
- 4
- 5

- 
2025-07-24
PSF Board Election Nominations Opening July 29th
- 
2025-07-22
Python 3.14 release candidate 1 is go!
- 
2025-07-16
Affirm Your PSF Membership Voting Status
- 
2025-07-09
PSF News: PyPI Orgs, Board Election, & Yearly Reports
- 
2025-07-08
Notice of Python Software Foundation Bylaws Change - Effective July 23, 2025

- 
2025-08-08
Buea - Creating Python Communities and outreach
- 
2025-08-11
DjangoCon Africa 2025
- 
2025-08-13
PyCon Somalia 2025
- 
2025-08-15
PyCon Korea 2025
- 
2025-08-18
EuroSciPy 2025

- Web Development:
        Django, Pyramid, Bottle, Tornado, Flask, web2py
- GUI Development:
        tkInter, PyGObject, PyQt, PySide, Kivy, wxPython, DearPyGui
- Scientific and Numeric:
        
SciPy, Pandas, IPython
- Software Development:
        Buildbot, Trac, Roundup
- System Administration:
        Ansible, Salt, OpenStack, xonsh

- 
About

Applications
Quotes
Getting Started
Help
Python Brochure


- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Downloads

All releases
Source code
Windows
macOS
Other Platforms
License
Alternative Implementations


- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 
Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays


- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Community

Diversity
Mailing Lists
IRC
Forums
PSF Annual Impact Report
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Code of Conduct
Community Awards
Get Involved
Shared Stories


- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 
News

Python News
PSF Newsletter
PSF News
PyCon US News
News from the Community


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community
- 
Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event


- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- 
Contributing

Developer's Guide
Issue Tracker
python-dev list
Core Mentorship
Report a Security Issue


- Developer's Guide
- Issue Tracker
- python-dev list
- Core Mentorship
- Report a Security Issue

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure

- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations

- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays

- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories

- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development

- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event

- Developer's Guide
- Issue Tracker
- python-dev list
- Core Mentorship
- Report a Security Issue

- Help & General Contact
- Diversity Initiatives
- Submit Website Bug
- 
Status

--------------------------------------------------

URL: https://www.python.org/#python-network
==================================================
Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. 

You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            


Python 3.13.5


Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Python 3.13.5


Note that Python 3.9+ cannot be used on Windows 7 or earlier.

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Python 3.13.5


Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.

Python can be used on many operating systems and environments.


View the full list of downloads


Get started below, or visit the Documentation page to browse by version. 


Python Docs


Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.

Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand

The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3

Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3

Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3.

Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3

Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview.

Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More

Whether you're new to programming or an experienced developer, it's easy to learn and use Python.

Start with our Beginner’s Guide

Python source code and installers are available for download for all versions!

Latest: Python 3.13.5

Documentation for Python's standard library, along with tutorials and guides, are available online.

docs.python.org

Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go.

jobs.python.org

More

More

More

Building a Dependency Graph of Our Python Codebase by George Farcasiu, Noah Kim, Jacon Brugh, Jiahao Li

More

The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more 


Become a Member
Donate to the PSF



Copyright ©2001-2025.
                             Python Software Foundation
                             Legal Statements
                             Privacy Notice



- 
Python

- 
PSF

- 
Docs

- 
PyPI

- 
Jobs

- 
Community


- 
A A

Smaller
Larger
Reset


- Smaller
- Larger
- Reset

- Smaller
- Larger
- Reset

- 
Socialize

LinkedIn
Mastodon
Chat on IRC
Twitter


- LinkedIn
- Mastodon
- Chat on IRC
- Twitter

- LinkedIn
- Mastodon
- Chat on IRC
- Twitter

- 
Sign In

Sign Up / Register
Sign In


- Sign Up / Register
- Sign In

- Sign Up / Register
- Sign In

- 
About

Applications
Quotes
Getting Started
Help
Python Brochure

Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            
- 
Downloads

All releases
Source code
Windows
macOS
Other Platforms
License
Alternative Implementations



Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads





- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 

Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads



- 
Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays

Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs



- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs


- 
Community

Diversity
Mailing Lists
IRC
Forums
PSF Annual Impact Report
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Code of Conduct
Community Awards
Get Involved
Shared Stories

The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.


- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.

- 
Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development



                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 

                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand

- 
News

Python News
PSF Newsletter
PSF News
PyCon US News
News from the Community


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community
- 
Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event
Find events from the Python Community around the world!

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- Find events from the Python Community around the world!

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Python is a programming language that lets you work more quickly and integrate your systems more effectively.
You can learn to use Python and see almost immediate gains in productivity and lower maintenance costs.  Learn more about Python.
                            

- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 

Python Source

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for Windows

Python 3.13.5

Note that Python 3.9+ cannot be used on Windows 7 or earlier.
Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download for macOS

Python 3.13.5

Not the OS you are looking for? Python can be used on many operating systems and environments. View the full list of downloads.


Download Python for Any OS
Python can be used on many operating systems and environments.

View the full list of downloads




- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Python’s standard documentation: download, browse or watch a tutorial.
Get started below, or visit the Documentation page to browse by version. 


Python Docs



- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
The Python Community
Great software is supported by great people. Our user base is enthusiastic, dedicated to encouraging use of the language, and committed to being diverse and friendly.


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 

                Python programmability on Algorand makes the entire development lifecycle easier and means more affordable and efficient maintenance and upgrades going forward.
            
Brian Whippo, Head of Developer Relations, Algorand Foundation, Algorand


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- Find events from the Python Community around the world!

- 
>_
                        Launch Interactive Shell



- 
# Python 3: Fibonacci series up to n
>>> def fib(n):
>>>     a, b = 0, 1
>>>     while a < n:
>>>         print(a, end=' ')
>>>         a, b = b, a+b
>>>     print()
>>> fib(1000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
Functions Defined
The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python 3

- 
# Python 3: List comprehensions
>>> fruits = ['Banana', 'Apple', 'Lime']
>>> loud_fruits = [fruit.upper() for fruit in fruits]
>>> print(loud_fruits)
['BANANA', 'APPLE', 'LIME']

# List and the enumerate function
>>> list(enumerate(fruits))
[(0, 'Banana'), (1, 'Apple'), (2, 'Lime')]
Compound Data Types
Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python 3

- 
# Python 3: Simple arithmetic
>>> 1 / 2
0.5
>>> 2 ** 3
8
>>> 17 / 3  # classic division returns a float
5.666666666666667
>>> 17 // 3  # floor division
5
Intuitive Interpretation
Calculations are simple with Python, and expression syntax is straightforward: the operators +, -, * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python 3.

- 
# For loop on a list
>>> numbers = [2, 4, 6, 8]
>>> product = 1
>>> for number in numbers:
...    product = product * number
... 
>>> print('The product is:', product)
The product is: 384
All the Flow You’d Expect
Python knows the usual control flow statements that other languages speak — if, for, while and range — with some of its own twists, of course. More control flow tools in Python 3

- 
# Simple output (with Unicode)
>>> print("Hello, I'm Python!")
Hello, I'm Python!
# Input, assignment
>>> name = input('What is your name?\n')
What is your name?
Python
>>> print(f'Hi, {name}.')
Hi, Python.

Quick & Easy to Learn
Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python 3 overview.


- 1
- 2
- 3
- 4
- 5

- 
2025-07-24
PSF Board Election Nominations Opening July 29th
- 
2025-07-22
Python 3.14 release candidate 1 is go!
- 
2025-07-16
Affirm Your PSF Membership Voting Status
- 
2025-07-09
PSF News: PyPI Orgs, Board Election, & Yearly Reports
- 
2025-07-08
Notice of Python Software Foundation Bylaws Change - Effective July 23, 2025

- 
2025-08-08
Buea - Creating Python Communities and outreach
- 
2025-08-11
DjangoCon Africa 2025
- 
2025-08-13
PyCon Somalia 2025
- 
2025-08-15
PyCon Korea 2025
- 
2025-08-18
EuroSciPy 2025

- Web Development:
        Django, Pyramid, Bottle, Tornado, Flask, web2py
- GUI Development:
        tkInter, PyGObject, PyQt, PySide, Kivy, wxPython, DearPyGui
- Scientific and Numeric:
        
SciPy, Pandas, IPython
- Software Development:
        Buildbot, Trac, Roundup
- System Administration:
        Ansible, Salt, OpenStack, xonsh

- 
About

Applications
Quotes
Getting Started
Help
Python Brochure


- Applications
- Quotes
- Getting Started
- Help
- Python Brochure
- 
Downloads

All releases
Source code
Windows
macOS
Other Platforms
License
Alternative Implementations


- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations
- 
Documentation

Docs
Audio/Visual Talks
Beginner's Guide
Developer's Guide
FAQ
Non-English Docs
PEP Index
Python Books
Python Essays


- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays
- 
Community

Diversity
Mailing Lists
IRC
Forums
PSF Annual Impact Report
Python Conferences
Special Interest Groups
Python Logo
Python Wiki
Code of Conduct
Community Awards
Get Involved
Shared Stories


- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories
- 
Success Stories

Arts
Business
Education
Engineering
Government
Scientific
Software Development


- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development
- 
News

Python News
PSF Newsletter
PSF News
PyCon US News
News from the Community


- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community
- 
Events

Python Events
User Group Events
Python Events Archive
User Group Events Archive
Submit an Event


- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event
- 
Contributing

Developer's Guide
Issue Tracker
python-dev list
Core Mentorship
Report a Security Issue


- Developer's Guide
- Issue Tracker
- python-dev list
- Core Mentorship
- Report a Security Issue

- Applications
- Quotes
- Getting Started
- Help
- Python Brochure

- All releases
- Source code
- Windows
- macOS
- Other Platforms
- License
- Alternative Implementations

- Docs
- Audio/Visual Talks
- Beginner's Guide
- Developer's Guide
- FAQ
- Non-English Docs
- PEP Index
- Python Books
- Python Essays

- Diversity
- Mailing Lists
- IRC
- Forums
- PSF Annual Impact Report
- Python Conferences
- Special Interest Groups
- Python Logo
- Python Wiki
- Code of Conduct
- Community Awards
- Get Involved
- Shared Stories

- Arts
- Business
- Education
- Engineering
- Government
- Scientific
- Software Development

- Python News
- PSF Newsletter
- PSF News
- PyCon US News
- News from the Community

- Python Events
- User Group Events
- Python Events Archive
- User Group Events Archive
- Submit an Event

- Developer's Guide
- Issue Tracker
- python-dev list
- Core Mentorship
- Report a Security Issue

- Help & General Contact
- Diversity Initiatives
- Submit Website Bug
- 
Status

--------------------------------------------------

